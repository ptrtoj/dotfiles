#+TITLE: JEMACS
#+PROPERTY: header-args:elisp :tangle ~/.config/emacs/init.el :mkdirp yes
#+STARTUP: show2levels

* Jeon's Extreme Minimal Alt + Ctrl + Shift
** Defaults
*** Tips & Tricks
#+begin_src ascii :tangle no
C-x h ;; runs the command mark-whole-buffer
C-M-\ ;; runs the command indent-region
#+end_src

*** User Info
#+begin_src elisp
  (setq user-full-name "WooHyung Jeon"
	user-mail-address "mail@staticintj.com")
#+end_src

*** Garbage Collection
#+begin_src elisp
  (setq gc-cons-threshold (* 50 1000 1000))
  (setq large-file-warning-threshold (* 10 1000 1000))
#+end_src

*** Startup Hook
#+begin_src elisp
  (defun jeon/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		      (time-subtract after-init-time before-init-time)))
	     gcs-done))

  (add-hook 'emacs-startup-hook #'jeon/display-startup-time)
#+end_src

*** Recent files
#+begin_src elisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)

  (save-place-mode 1)
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
#+end_src

*** yes-or-no to y-or-n
#+begin_src elisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** UI
*** Defaults
#+begin_src elisp
  (setq inhibit-startup-message t)
  (setq visible-bell t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (menu-bar-mode -1)          ; Disable the menu bar
  (set-fringe-mode 10)        ; Give some breathing room

  (windmove-default-keybindings)
#+end_src

*** Transparency
#+begin_src elisp
  ;; Make frame transparency overridable
  (defvar jeon/frame-transparency '(90 . 80))

  ;; Set frame transparency
  ;; Also works with Gnome/Xorg
  (set-frame-parameter (selected-frame) 'alpha jeon/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,jeon/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

*** Numbers
#+begin_src elisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers 'relative)
  (global-hl-line-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

*** Fonts
#+begin_src elisp
  (set-face-attribute 'default nil :font "BerkeleyMono NFM" :height 90)
  (set-face-attribute 'fixed-pitch nil :font "BerkeleyMono NFM" :height 90)
  (set-face-attribute 'variable-pitch nil :font "BerkeleyMono NFM" :height 90)
#+end_src

** Plugins
*** Straight.el
#+begin_src elisp
  (setq package-enable-at-startup nil)
  (setq straight-use-package-by-default t)
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

*** Use-package
#+begin_src elisp
  (straight-use-package 'use-package)
#+end_src

*** All-the-icons
#+begin_src elisp
  (use-package all-the-icons
    :straight t)
#+end_src

*** Company
#+begin_src elisp
  (use-package company
    :straight t
    :hook
    (after-init . #'global-company-mode))
#+end_src

*** Dashboard
#+begin_src elisp
  (use-package dashboard
    :straight t
    :config
    (setq dashboard-items '((recents . 15)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner 3)
    (dashboard-setup-startup-hook))
#+end_src

*** Diminish
#+begin_src elisp
  (use-package diminish
    :straight t)
#+end_src

*** Doom-modeline
#+begin_src elisp
  (use-package doom-modeline
    :straight t
    :config
    (display-battery-mode 1)
    (display-time-mode 1)
    :init
    (doom-modeline-mode 1))
#+end_src

*** Evil
#+begin_src elisp
  (use-package evil
    :straight t
    :config
    (evil-mode 1))
#+end_src

*** Fly-check
#+begin_src elisp
  (use-package flycheck
    :straight t
    :hook
    (after-init . #'global-flycheck-mode))
#+end_src

*** Helm
#+begin_src elisp
  (use-package helm
    :straight t
    :bind
    (("M-x" . helm-M-x)
     ("C-x r b" . helm-filtered-bookmarks)
     ("C-x C-f" . helm-find-files))
    :config
    (helm-mode 1))
#+end_src

*** Helm-LSP
#+begin_src elisp
  (use-package helm-lsp
  :straight t)
#+end_src

*** LSP
#+begin_src elisp
  (use-package lsp-mode
  :straight t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	 (bash-mode . lsp)
	 ;; if you want which-key integration
	 (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)
#+end_src

*** LSP-UI
#+begin_src elisp
  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode)
#+end_src

*** LSP-Treemacs
#+begin_src elisp
  (use-package lsp-treemacs
  :straight t
  :config
  (lsp-treemacs-sync-mode 1))
#+end_src

*** Magit
#+begin_src elisp
  (use-package magit
    :straight t)
#+end_src

*** Neotree
#+begin_src elisp
  (use-package neotree
    :straight t
    :bind
    ([f5] . neotree-toggle)
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src

*** Nord Theme
#+begin_src elisp
  (use-package nord-theme
    :straight t
    :config
    (load-theme 'nord t))
#+end_src

*** Org-bullets
#+begin_src elisp
  (use-package org-bullets
    :straight t
    :init
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+end_src

*** Projectile
#+begin_src elisp
  (use-package projectile
    :straight t
    :bind
    (("s-p" . projectile-command-map)
     ("C-c p" . projectile-command-map))
    :config
    (projectile-mode 1))
#+end_src

*** Rainbow-delimiters
#+begin_src elisp
  (use-package rainbow-delimiters
    :straight t
    :hook
    (org-mode . #'rainbow-delimiters-mode))
#+end_src

*** Smartparens
#+begin_src elisp
  (use-package smartparens
    :straight t
    :hook
    (minibuffer-setup . #'turn-on-smartparens-strict-mode))
#+end_src

*** Which-key
#+begin_src elisp
  (use-package which-key
    :straight t
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.1))
#+end_src

** Before Save Hook
#+begin_src elisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src
