#+TITLE: JEMACS
#+PROPERTY: header-args:elisp :tangle ~/.config/emacs/init.el :mkdirp yes
#+STARTUP: show3levels

* Jeon's Extreme Minimal ALT + CTRL + SHIFT (v2)

Only necessary features are added.

** Install
#+begin_src ascii :tange no
$stow -vt ~ emacs
#+end_src

*** Tips & Tricks
#+begin_src ascii :tangle no
C-x h ;; runs the command mark-whole-buffer
C-M-\ ;; runs the command indent-region
#+end_src

** Startup Hook
#+begin_src elisp
  (defun ptrtoj/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		      (time-subtract after-init-time before-init-time)))
	     gcs-done))

  (add-hook 'emacs-startup-hook #'ptrtoj/display-startup-time)
#+end_src

*** Garbage Collection
#+begin_src elisp
  (setq gc-cons-threshold (* 50 1000 1000))
  (setq large-file-warning-threshold (* 10 1000 1000))
#+end_src

** Before Save Hook
#+begin_src elisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

** Defaults
*** User Info
#+begin_src elisp
  (setq user-full-name "WooHyung Jeon"
	user-mail-address "jeon@ptrtoj.com")
#+end_src

** UI
*** Defaults
#+begin_src elisp
  (setq inhibit-startup-message t)
  (setq visible-bell t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (menu-bar-mode -1)          ; Disable the menu bar
  (set-fringe-mode 10)        ; Give some breathing room

  (windmove-default-keybindings)
#+end_src

*** yes-or-no to y-or-n
#+begin_src elisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Recent files
#+begin_src elisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)

  (save-place-mode 1)
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
#+end_src

*** Numbers
#+begin_src elisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers 'relative)
  (global-hl-line-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

*** Transparency
#+begin_src elisp
  ;; Make frame transparency overridable
  (defvar ptrtoj/frame-transparency '(90 . 80))

  ;; Set frame transparency
  ;; Also works with Gnome/Xorg
  (set-frame-parameter (selected-frame) 'alpha ptrtoj/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,ptrtoj/frame-transparency))
#+end_src

** Plugins
*** Emacs Package Manager
**** Initialize built-in settings
#+begin_src elisp
(require 'package)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(package-initialize)
#+end_src

**** Install use-package
#+begin_src elisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src

*** Basic Stuff
**** Diminish
Want to hide minor-modes in statusline
#+begin_src elisp
  (use-package diminish)
#+end_src

**** Which-key
Need to know keys :/
#+begin_src elisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode))
#+end_src

**** vterm
For a better teminal
#+begin_src elisp
  (use-package vterm)
#+end_src

*** Git
Yeah! Emacs Git Package!
#+begin_src elisp
  (use-package magit)
#+end_src

*** LSP
**** Fly-check
#+begin_src elisp
  (use-package flycheck
    :hook
    (after-init . #'global-flycheck-mode))
#+end_src

**** LSP-MODE
#+begin_src elisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook
    (python-mode . lsp)
    (lsp-mode . lsp-enable-which-key-integration)
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)

  ;; if you are helm user
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  (use-package helm
    :bind
    (("M-x" . helm-M-x)
     ("C-x r b" . helm-filtered-bookmarks)
     ("C-x C-f" . helm-find-files))
    :config
    (helm-mode 1))

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

**** Company
#+begin_src elisp
  (use-package company
    :hook
    (after-init . #'global-company-mode))
#+end_src

**** Neotree
#+begin_src elisp
  (use-package neotree
    :bind
    ([f5] . neotree-toggle)
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+end_src

**** Projectile
#+begin_src elisp
  (use-package projectile
    :bind
    (("s-p" . projectile-command-map)
     ("C-c p" . projectile-command-map))
    :config
    (projectile-mode 1))
#+end_src

*** UI & Themes
**** Rainbow-delimiters
#+begin_src elisp
  (use-package rainbow-delimiters
    :hook
    ('prog-mode . #'rainbow-delimiters-mode)
    ('org-mode . #'rainbow-delimiters-mode))
#+end_src

**** Org-bullets
#+begin_src elisp
  (use-package org-bullets
    :init
    :hook
    ('org-mode . #'org-bullets-mode))
#+end_src

**** Smartparens
#+begin_src elisp
  (use-package smartparens
    :hook
    ('prog-mode . #'smartparens-strict-mode)
    ('org-mode . #'smartparens-strict-mode))
#+end_src

**** All-the-icons
Fancy fonts and icons
#+begin_src elisp
  (use-package all-the-icons)
#+end_src

**** Nord Theme
And themes
#+begin_src elisp
  (use-package nord-theme
    :config
    (load-theme 'nord t))
#+end_src

**** Doom-modeline
#+begin_src elisp
  (use-package doom-modeline
    :config
    (display-battery-mode 1)
    (display-time-mode 1)
    :init
    (doom-modeline-mode 1))
#+end_src
